-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_sincos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (28 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of generic_sincos is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv43_9B74EDA843 : STD_LOGIC_VECTOR (42 downto 0) := "0001001101101110100111011011010100001000011";
    constant ap_const_lv43_0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv85_517CC1B72721FE3 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000010100010111110011000001101101110010011100100001111111100011";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv43_1B7812AEEF5 : STD_LOGIC_VECTOR (42 downto 0) := "0011011011110000001001010101110111011110101";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv43_3243F6A8885 : STD_LOGIC_VECTOR (42 downto 0) := "0110010010000111111011010101000100010000101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_apfixed_circ_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_apfixed_circ_ce0 : STD_LOGIC;
    signal cordic_apfixed_circ_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Val2_s_fu_177_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_s_reg_495 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln728_fu_185_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln728_reg_500 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_V_reg_510 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln1193_reg_524 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln879_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal z_V_fu_289_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal z_V_reg_535 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln251_fu_297_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal n_fu_306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_reg_548 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln87_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_333_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln203_reg_558 : STD_LOGIC_VECTOR (42 downto 0);
    signal sub_ln203_fu_339_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal sub_ln203_reg_563 : STD_LOGIC_VECTOR (42 downto 0);
    signal sub_ln203_1_fu_345_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal sub_ln203_1_reg_568 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln203_2_fu_351_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln203_2_reg_573 : STD_LOGIC_VECTOR (42 downto 0);
    signal tz_V_fu_391_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ty_V_fu_399_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal tx_V_fu_405_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_13_reg_113 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_18_reg_125 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_15_reg_136 : STD_LOGIC_VECTOR (42 downto 0);
    signal ush_reg_146 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln99_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1494_fu_157_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln703_fu_167_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sign0_V_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_fu_171_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lhs_V_fu_217_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_fu_224_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln708_7_fu_244_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_11_fu_229_p4 : STD_LOGIC_VECTOR (41 downto 0);
    signal rhs_V_fu_258_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_6_fu_262_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal icmp_ln251_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln251_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_fu_268_p4 : STD_LOGIC_VECTOR (41 downto 0);
    signal zext_ln203_fu_254_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal zext_ln1299_fu_312_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_8_fu_322_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_7_fu_316_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_fu_357_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal z_s_V_fu_367_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_2_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_379_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal sub_ln203_2_fu_385_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln1253_fu_416_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_9_fu_420_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal icmp_ln879_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_5_fu_426_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln4_fu_441_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln879_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_fu_462_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_192_p10 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_211_p10 : STD_LOGIC_VECTOR (42 downto 0);

    component geo_dist_mul_60nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component geo_dist_mul_42nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component generic_sincos_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;



begin
    cordic_apfixed_circ_U : component generic_sincos_cobkb
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_apfixed_circ_address0,
        ce0 => cordic_apfixed_circ_ce0,
        q0 => cordic_apfixed_circ_q0);

    geo_dist_mul_60nscud_U1 : component geo_dist_mul_60nscud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 60,
        din1_WIDTH => 27,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        din1 => grp_fu_192_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);

    geo_dist_mul_42nsdEe_U2 : component geo_dist_mul_42nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 2,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_13_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_13_reg_113 <= ap_const_lv43_9B74EDA843;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_13_reg_113 <= tx_V_fu_405_p3;
            end if; 
        end if;
    end process;

    p_Val2_15_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_15_reg_136 <= sext_ln251_fu_297_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_15_reg_136 <= tz_V_fu_391_p3;
            end if; 
        end if;
    end process;

    p_Val2_18_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_18_reg_125 <= ap_const_lv43_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_18_reg_125 <= ty_V_fu_399_p3;
            end if; 
        end if;
    end process;

    ush_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ush_reg_146 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ush_reg_146 <= n_reg_548;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln87_fu_300_p2 = ap_const_lv1_0))) then
                add_ln203_2_reg_573 <= add_ln203_2_fu_351_p2;
                add_ln203_reg_558 <= add_ln203_fu_333_p2;
                sub_ln203_1_reg_568 <= sub_ln203_1_fu_345_p2;
                sub_ln203_reg_563 <= sub_ln203_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln879_reg_529 <= icmp_ln879_fu_239_p2;
                z_V_reg_535 <= z_V_fu_289_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_V_reg_510 <= grp_fu_192_p2(84 downto 83);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln1193_reg_524 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                n_reg_548 <= n_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                p_Val2_s_reg_495 <= p_Val2_s_fu_177_p3;
                trunc_ln728_reg_500 <= trunc_ln728_fu_185_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln87_fu_300_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln87_fu_300_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln203_1_fu_379_p2 <= std_logic_vector(unsigned(z_s_V_fu_367_p1) + unsigned(p_Val2_15_reg_136));
    add_ln203_2_fu_351_p2 <= std_logic_vector(unsigned(p_Val2_18_reg_125) + unsigned(r_V_7_fu_316_p2));
    add_ln203_fu_333_p2 <= std_logic_vector(unsigned(p_Val2_13_reg_113) + unsigned(r_V_8_fu_322_p2));
    and_ln879_1_fu_481_p2 <= (xor_ln879_1_fu_475_p2 and icmp_ln879_2_fu_436_p2);
    and_ln879_fu_457_p2 <= (xor_ln879_fu_451_p2 and icmp_ln879_reg_529);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        trunc_ln708_5_fu_426_p4 when (and_ln879_1_fu_481_p2(0) = '1') else 
        select_ln879_fu_462_p3;
    cordic_apfixed_circ_address0 <= zext_ln99_fu_328_p1(7 - 1 downto 0);

    cordic_apfixed_circ_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cordic_apfixed_circ_ce0 <= ap_const_logic_1;
        else 
            cordic_apfixed_circ_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_192_p0 <= ap_const_lv85_517CC1B72721FE3(60 - 1 downto 0);
    grp_fu_192_p1 <= grp_fu_192_p10(27 - 1 downto 0);
    grp_fu_192_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_495),85));
    grp_fu_211_p0 <= ap_const_lv43_1B7812AEEF5(42 - 1 downto 0);
    grp_fu_211_p1 <= grp_fu_211_p10(2 - 1 downto 0);
    grp_fu_211_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_V_reg_510),43));
    icmp_ln251_fu_278_p2 <= "1" when (k_V_reg_510 = ap_const_lv2_3) else "0";
    icmp_ln879_1_fu_411_p2 <= "1" when (k_V_reg_510 = ap_const_lv2_0) else "0";
    icmp_ln879_2_fu_436_p2 <= "1" when (k_V_reg_510 = ap_const_lv2_2) else "0";
    icmp_ln879_fu_239_p2 <= "1" when (k_V_reg_510 = ap_const_lv2_1) else "0";
    icmp_ln87_fu_300_p2 <= "1" when (ush_reg_146 = ap_const_lv6_2B) else "0";
    lhs_V_fu_217_p3 <= (trunc_ln728_reg_500 & ap_const_lv18_0);
    n_fu_306_p2 <= std_logic_vector(unsigned(ush_reg_146) + unsigned(ap_const_lv6_1));
    or_ln251_fu_283_p2 <= (icmp_ln879_fu_239_p2 or icmp_ln251_fu_278_p2);
    or_ln879_fu_470_p2 <= (icmp_ln879_reg_529 or icmp_ln879_1_fu_411_p2);
    p_Val2_11_fu_229_p4 <= ret_V_fu_224_p2(42 downto 1);
    p_Val2_s_fu_177_p3 <= 
        trunc_ln703_fu_167_p1 when (sign0_V_fu_161_p2(0) = '1') else 
        sub_ln703_fu_171_p2;
    r_V_7_fu_316_p2 <= std_logic_vector(shift_right(signed(p_Val2_13_reg_113),to_integer(unsigned('0' & zext_ln1299_fu_312_p1(31-1 downto 0)))));
    r_V_8_fu_322_p2 <= std_logic_vector(shift_right(signed(p_Val2_18_reg_125),to_integer(unsigned('0' & zext_ln1299_fu_312_p1(31-1 downto 0)))));
    r_V_9_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv42_0) - unsigned(trunc_ln1253_fu_416_p1));
    ret_V_6_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv43_3243F6A8885) - unsigned(rhs_V_fu_258_p1));
    ret_V_fu_224_p2 <= std_logic_vector(unsigned(mul_ln1193_reg_524) + unsigned(lhs_V_fu_217_p3));
    rhs_V_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_11_fu_229_p4),43));
    select_ln879_fu_462_p3 <= 
        trunc_ln708_5_fu_426_p4 when (and_ln879_fu_457_p2(0) = '1') else 
        trunc_ln4_fu_441_p4;
        sext_ln251_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_V_reg_535),43));

    sign0_V_fu_161_p2 <= "1" when (signed(trunc_ln1494_fu_157_p1) > signed(ap_const_lv28_0)) else "0";
    sub_ln203_1_fu_345_p2 <= std_logic_vector(unsigned(p_Val2_13_reg_113) - unsigned(r_V_8_fu_322_p2));
    sub_ln203_2_fu_385_p2 <= std_logic_vector(unsigned(p_Val2_15_reg_136) - unsigned(z_s_V_fu_367_p1));
    sub_ln203_fu_339_p2 <= std_logic_vector(unsigned(p_Val2_18_reg_125) - unsigned(r_V_7_fu_316_p2));
    sub_ln703_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(trunc_ln703_fu_167_p1));
    tmp_2_fu_371_p3 <= p_Val2_15_reg_136(42 downto 42);
    tmp_fu_357_p4 <= cordic_apfixed_circ_q0(125 downto 86);
    trunc_ln1253_fu_416_p1 <= p_Val2_13_reg_113(42 - 1 downto 0);
    trunc_ln1494_fu_157_p1 <= in_V(28 - 1 downto 0);
    trunc_ln2_fu_268_p4 <= ret_V_6_fu_262_p2(42 downto 1);
    trunc_ln4_fu_441_p4 <= p_Val2_13_reg_113(41 downto 16);
    trunc_ln703_fu_167_p1 <= in_V(27 - 1 downto 0);
    trunc_ln708_5_fu_426_p4 <= r_V_9_fu_420_p2(41 downto 16);
    trunc_ln708_7_fu_244_p4 <= ret_V_fu_224_p2(42 downto 2);
    trunc_ln728_fu_185_p1 <= p_Val2_s_fu_177_p3(25 - 1 downto 0);
    tx_V_fu_405_p3 <= 
        add_ln203_reg_558 when (tmp_2_fu_371_p3(0) = '1') else 
        sub_ln203_1_reg_568;
    ty_V_fu_399_p3 <= 
        sub_ln203_reg_563 when (tmp_2_fu_371_p3(0) = '1') else 
        add_ln203_2_reg_573;
    tz_V_fu_391_p3 <= 
        add_ln203_1_fu_379_p2 when (tmp_2_fu_371_p3(0) = '1') else 
        sub_ln203_2_fu_385_p2;
    xor_ln879_1_fu_475_p2 <= (or_ln879_fu_470_p2 xor ap_const_lv1_1);
    xor_ln879_fu_451_p2 <= (icmp_ln879_1_fu_411_p2 xor ap_const_lv1_1);
    z_V_fu_289_p3 <= 
        trunc_ln2_fu_268_p4 when (or_ln251_fu_283_p2(0) = '1') else 
        zext_ln203_fu_254_p1;
    z_s_V_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_357_p4),43));
    zext_ln1299_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_reg_146),43));
    zext_ln203_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln708_7_fu_244_p4),42));
    zext_ln99_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_reg_146),64));
end behav;
