-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_asin_20_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (18 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of generic_asin_20_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (94 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (94 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (94 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (94 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (94 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (94 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (94 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (94 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (94 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (94 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (94 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv21_40000 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv15_1921 : STD_LOGIC_VECTOR (14 downto 0) := "001100100100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_66DE : STD_LOGIC_VECTOR (14 downto 0) := "110011011011110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv19_1000 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_const_lv19_7F000 : STD_LOGIC_VECTOR (18 downto 0) := "1111111000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv32_1000000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_FE8 : STD_LOGIC_VECTOR (11 downto 0) := "111111101000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv33_1000000 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_apfixed_circ_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_apfixed_circ_ce0 : STD_LOGIC;
    signal cordic_apfixed_circ_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal icmp_ln1498_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_1_reg_1282 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_2_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_2_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1290 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_330_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_s_reg_1295 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_12_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_350_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal n_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_1313 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal isNeg_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1367_fu_402_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1367_reg_1324 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1367_1_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1367_1_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_426_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_reg_1334 : STD_LOGIC_VECTOR (20 downto 0);
    signal n2_fu_434_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal n2_reg_1341 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_V_2_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_V_2_reg_1352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_11_fu_497_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_11_reg_1358 : STD_LOGIC_VECTOR (20 downto 0);
    signal tz_V_fu_538_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tz_V_reg_1365 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln178_fu_546_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln178_reg_1370 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_43_fu_554_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_43_reg_1375 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln195_fu_580_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln195_reg_1381 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln160_fu_616_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln160_1_fu_623_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_V_3_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_3_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln885_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1407 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal l_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln893_fu_698_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1431 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln894_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1442 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1447 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s_reg_1452 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_16_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln885_fu_923_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln885_reg_1462 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_1467 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal man_V_4_fu_981_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_1472 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal sh_amt_fu_1019_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1477 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_1033_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_1487 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1492 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_1147_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_1_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln603_2_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_1212_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_1507 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_1232_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sdiv_ln1148_reg_1522 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal xsqrtonex_V_fu_1241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xsqrtonex_V_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal sext_ln703_fu_1260_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_generic_atan_32_8_s_fu_286_ap_ready : STD_LOGIC;
    signal grp_generic_atan_32_8_s_fu_286_ap_done : STD_LOGIC;
    signal grp_generic_atan_32_8_s_fu_286_ap_start : STD_LOGIC;
    signal grp_generic_atan_32_8_s_fu_286_ap_idle : STD_LOGIC;
    signal grp_generic_atan_32_8_s_fu_286_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_39_reg_201 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_41_reg_213 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_38_reg_225 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_47_reg_237 : STD_LOGIC_VECTOR (20 downto 0);
    signal n_0_i_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln703_reg_258 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_V_fu_1270_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_agg_result_V_0_phi_fu_273_p8 : STD_LOGIC_VECTOR (14 downto 0);
    signal agg_result_V_0_reg_267 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_generic_atan_32_8_s_fu_286_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln201_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sub_ln203_fu_324_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln728_fu_346_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln143_fu_370_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1367_fu_388_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ush_fu_394_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1367_1cast_fu_410_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1299_fu_414_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ashr_ln1333_fu_420_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_21_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1497_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_V_1_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1367_1cast27_fu_483_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1299_1_fu_486_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ashr_ln1333_1_fu_492_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_fu_504_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_15_fu_514_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln709_fu_522_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln203_5_fu_526_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln203_fu_532_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_12_fu_549_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln194_fu_560_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_14_fu_568_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln195_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_2_fu_574_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_13_fu_588_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_45_fu_592_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln703_fu_598_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln703_5_fu_607_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln703_4_fu_602_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln703_1_fu_611_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln703_fu_643_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln703_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln703_fu_643_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln703_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_fu_680_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_713_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_729_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_fu_733_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln897_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln897_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_2_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_766_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_2_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_845_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_855_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln915_fu_882_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln915_fu_889_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_894_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_11_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_900_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_18_fu_907_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln729_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_945_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_959_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_963_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_20_fu_971_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_19_fu_937_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_3_fu_975_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_933_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_955_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_995_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_1007_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_1013_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_1043_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1059_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1067_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_1167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1170_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1174_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal shl_ln604_fu_1183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_fu_1179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_fu_1188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_2_fu_1195_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_37_fu_1201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_1208_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal t_V_1_fu_1218_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_1232_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln731_fu_1238_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln708_8_fu_1250_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln703_fu_1264_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1232_ap_start : STD_LOGIC;
    signal grp_fu_1232_ap_done : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (94 downto 0);

    component generic_atan_32_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component geo_dist_dsqrt_64hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component geo_dist_sdiv_44nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component generic_sincos_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;



begin
    cordic_apfixed_circ_U : component generic_sincos_cobkb
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_apfixed_circ_address0,
        ce0 => cordic_apfixed_circ_ce0,
        q0 => cordic_apfixed_circ_q0);

    grp_generic_atan_32_8_s_fu_286 : component generic_atan_32_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_atan_32_8_s_fu_286_ap_start,
        ap_done => grp_generic_atan_32_8_s_fu_286_ap_done,
        ap_idle => grp_generic_atan_32_8_s_fu_286_ap_idle,
        ap_ready => grp_generic_atan_32_8_s_fu_286_ap_ready,
        in_V => xsqrtonex_V_reg_1527,
        ap_return => grp_generic_atan_32_8_s_fu_286_ap_return);

    geo_dist_dsqrt_64hbi_U10 : component geo_dist_dsqrt_64hbi
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => select_ln885_reg_1462,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    geo_dist_sdiv_44nibs_U11 : component geo_dist_sdiv_44nibs
    generic map (
        ID => 1,
        NUM_STAGE => 48,
        din0_WIDTH => 44,
        din1_WIDTH => 33,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1232_ap_start,
        done => grp_fu_1232_ap_done,
        din0 => grp_fu_1232_p0,
        din1 => ret_V_reg_1507,
        ce => ap_const_logic_1,
        dout => grp_fu_1232_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv15_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                    ap_return_preg <= ap_phi_mux_agg_result_V_0_phi_fu_273_p8;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_atan_32_8_s_fu_286_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_atan_32_8_s_fu_286_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                    grp_generic_atan_32_8_s_fu_286_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_atan_32_8_s_fu_286_ap_ready = ap_const_logic_1)) then 
                    grp_generic_atan_32_8_s_fu_286_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_0_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_1) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                agg_result_V_0_reg_267 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_1) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                agg_result_V_0_reg_267 <= ap_const_lv15_66DE;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then 
                agg_result_V_0_reg_267 <= ap_const_lv15_1921;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state95) and (icmp_ln1498_2_reg_1286 = ap_const_lv1_0) and (icmp_ln1498_1_reg_1282 = ap_const_lv1_0) and (icmp_ln1498_reg_1278 = ap_const_lv1_0))) then 
                agg_result_V_0_reg_267 <= out_V_fu_1270_p3;
            end if; 
        end if;
    end process;

    n_0_i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                n_0_i_reg_247 <= n_reg_1313;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_0) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                n_0_i_reg_247 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_38_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_38_reg_225 <= tz_V_reg_1365;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_0) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                p_Val2_38_reg_225 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    p_Val2_39_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_39_reg_201 <= select_ln160_fu_616_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_0) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                p_Val2_39_reg_201 <= ap_const_lv21_40000;
            end if; 
        end if;
    end process;

    p_Val2_41_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_41_reg_213 <= select_ln160_1_fu_623_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_0) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                p_Val2_41_reg_213 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    p_Val2_47_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_47_reg_237 <= select_ln195_reg_1381;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_0) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                p_Val2_47_reg_237 <= t_V_fu_350_p3;
            end if; 
        end if;
    end process;

    phi_ln703_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_atan_32_8_s_fu_286_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                phi_ln703_reg_258 <= sext_ln703_fu_1260_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_ln703_reg_258 <= p_Val2_38_reg_225(20 downto 6);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                and_ln603_reg_1487 <= and_ln603_fu_1135_p2;
                man_V_4_reg_1472 <= man_V_4_fu_981_p3;
                or_ln603_2_reg_1502 <= or_ln603_2_fu_1161_p2;
                or_ln603_reg_1492 <= or_ln603_fu_1141_p2;
                select_ln603_1_reg_1497 <= select_ln603_1_fu_1147_p3;
                sh_amt_reg_1477 <= sh_amt_fu_1019_p3;
                trunc_ln583_reg_1482 <= trunc_ln583_fu_1033_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                d_V_2_reg_1352 <= d_V_2_fu_475_p3;
                r_V_11_reg_1358 <= r_V_11_fu_497_p3;
                tz_V_reg_1365 <= tz_V_fu_538_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                icmp_ln1498_1_reg_1282 <= icmp_ln1498_1_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                icmp_ln1498_2_reg_1286 <= icmp_ln1498_2_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln1498_reg_1278 <= icmp_ln1498_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln885_reg_1407 <= icmp_ln885_fu_655_p2;
                p_Result_16_reg_1412 <= tmp_V_3_fu_649_p2(31 downto 31);
                tmp_V_3_reg_1401 <= tmp_V_3_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln885_reg_1407 = ap_const_lv1_0))) then
                icmp_ln908_reg_1447 <= icmp_ln908_fu_807_p2;
                    or_ln_reg_1442(0) <= or_ln_fu_799_p3(0);
                sub_ln894_reg_1436 <= sub_ln894_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln143_fu_358_p2 = ap_const_lv1_0))) then
                isNeg_reg_1319 <= add_ln176_fu_374_p2(5 downto 5);
                    n2_reg_1341(5 downto 1) <= n2_fu_434_p3(5 downto 1);
                r_V_reg_1334 <= r_V_fu_426_p3;
                sext_ln1367_1_reg_1329 <= sext_ln1367_1_fu_406_p1;
                sext_ln1367_reg_1324 <= sext_ln1367_fu_402_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln885_reg_1407 = ap_const_lv1_0))) then
                l_reg_1426 <= l_fu_690_p3;
                tmp_V_4_reg_1418 <= tmp_V_4_fu_674_p3;
                trunc_ln893_reg_1431 <= trunc_ln893_fu_698_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln885_reg_1407 = ap_const_lv1_0))) then
                m_s_reg_1452 <= m_8_fu_855_p2(63 downto 1);
                tmp_16_reg_1457 <= m_8_fu_855_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_reg_1313 <= n_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_43_reg_1375 <= p_Val2_43_fu_554_p2;
                select_ln195_reg_1381 <= select_ln195_fu_580_p3;
                    zext_ln178_reg_1370(4 downto 0) <= zext_ln178_fu_546_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                p_Val2_s_reg_1295 <= p_Val2_s_fu_330_p3;
                tmp_reg_1290 <= in_V(18 downto 18);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                ret_V_reg_1507 <= ret_V_fu_1212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                sdiv_ln1148_reg_1522 <= grp_fu_1232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln885_reg_1462 <= select_ln885_fu_923_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                v_assign_reg_1467 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                    xsqrtonex_V_reg_1527(31 downto 12) <= xsqrtonex_V_fu_1241_p3(31 downto 12);
            end if;
        end if;
    end process;
    n2_reg_1341(0) <= '0';
    zext_ln178_reg_1370(20 downto 5) <= "0000000000000000";
    or_ln_reg_1442(31 downto 1) <= "0000000000000000000000000000000";
    xsqrtonex_V_reg_1527(11 downto 0) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1498_fu_298_p2, icmp_ln1498_1_fu_304_p2, icmp_ln1498_2_fu_310_p2, tmp_12_fu_338_p3, ap_CS_fsm_state2, icmp_ln143_fu_358_p2, ap_CS_fsm_state94, grp_generic_atan_32_8_s_fu_286_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_0) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_12_fu_338_p3 = ap_const_lv1_1) and (icmp_ln1498_2_fu_310_p2 = ap_const_lv1_0) and (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_0) and (icmp_ln1498_fu_298_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((icmp_ln1498_fu_298_p2 = ap_const_lv1_1) or ((icmp_ln1498_2_fu_310_p2 = ap_const_lv1_1) or (icmp_ln1498_1_fu_304_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln143_fu_358_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((grp_generic_atan_32_8_s_fu_286_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_995_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_955_p1));
    a_fu_760_p2 <= (icmp_ln897_fu_723_p2 and icmp_ln897_2_fu_754_p2);
    add_ln176_fu_374_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(zext_ln143_fu_370_p1));
    add_ln203_fu_532_p2 <= std_logic_vector(unsigned(zext_ln709_fu_522_p1) + unsigned(p_Val2_38_reg_225));
    add_ln581_fu_1007_p2 <= std_logic_vector(signed(ap_const_lv12_FE8) + signed(F2_fu_995_p2));
    add_ln703_1_fu_611_p2 <= std_logic_vector(unsigned(r_V_reg_1334) + unsigned(p_Val2_45_fu_592_p2));
    add_ln703_2_fu_574_p2 <= std_logic_vector(unsigned(r_V_14_fu_568_p2) + unsigned(p_Val2_47_reg_237));
    add_ln703_fu_598_p2 <= std_logic_vector(unsigned(r_V_11_reg_1358) + unsigned(p_Val2_43_reg_1375));
    add_ln908_fu_816_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1436));
    add_ln915_fu_894_p2 <= std_logic_vector(unsigned(select_ln915_fu_882_p3) + unsigned(sub_ln915_fu_889_p2));
    and_ln581_fu_1099_p2 <= (xor_ln582_fu_1093_p2 and icmp_ln581_fu_1001_p2);
    and_ln582_fu_1081_p2 <= (xor_ln571_fu_1075_p2 and icmp_ln582_fu_1027_p2);
    and_ln585_1_fu_1117_p2 <= (icmp_ln585_fu_1037_p2 and and_ln581_fu_1099_p2);
    and_ln585_fu_1111_p2 <= (xor_ln585_fu_1105_p2 and and_ln581_fu_1099_p2);
    and_ln603_fu_1135_p2 <= (xor_ln581_fu_1129_p2 and icmp_ln603_fu_1053_p2);
    and_ln899_fu_787_p2 <= (xor_ln899_fu_774_p2 and p_Result_2_fu_780_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_V_0_phi_fu_273_p8_assign_proc : process(icmp_ln1498_reg_1278, icmp_ln1498_1_reg_1282, icmp_ln1498_2_reg_1286, out_V_fu_1270_p3, agg_result_V_0_reg_267, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) and (icmp_ln1498_2_reg_1286 = ap_const_lv1_0) and (icmp_ln1498_1_reg_1282 = ap_const_lv1_0) and (icmp_ln1498_reg_1278 = ap_const_lv1_0))) then 
            ap_phi_mux_agg_result_V_0_phi_fu_273_p8 <= out_V_fu_1270_p3;
        else 
            ap_phi_mux_agg_result_V_0_phi_fu_273_p8 <= agg_result_V_0_reg_267;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_agg_result_V_0_phi_fu_273_p8, ap_CS_fsm_state95, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_return <= ap_phi_mux_agg_result_V_0_phi_fu_273_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    ashr_ln1333_1_fu_492_p2 <= std_logic_vector(shift_right(signed(p_Val2_41_reg_213),to_integer(unsigned('0' & sext_ln1367_reg_1324(21-1 downto 0)))));
    ashr_ln1333_fu_420_p2 <= std_logic_vector(shift_right(signed(p_Val2_39_reg_201),to_integer(unsigned('0' & sext_ln1367_fu_402_p1(21-1 downto 0)))));
    ashr_ln586_fu_1174_p2 <= std_logic_vector(shift_right(signed(man_V_4_reg_1472),to_integer(unsigned('0' & zext_ln586_fu_1170_p1(31-1 downto 0)))));
    bitcast_ln729_fu_919_p1 <= p_Result_18_fu_907_p5;

    cordic_apfixed_circ_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state94, zext_ln201_fu_442_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_apfixed_circ_address0 <= zext_ln201_fu_442_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            cordic_apfixed_circ_address0 <= ap_const_lv7_0;
        else 
            cordic_apfixed_circ_address0 <= "XXXXXXX";
        end if; 
    end process;


    cordic_apfixed_circ_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_apfixed_circ_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            cordic_apfixed_circ_ce0 <= ap_const_logic_0;
        else 
            cordic_apfixed_circ_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_1_fu_469_p2 <= (tmp_21_fu_461_p3 xor ap_const_lv1_1);
    d_V_2_fu_475_p3 <= 
        d_V_1_fu_469_p2 when (icmp_ln1497_fu_447_p2(0) = '1') else 
        p_Result_15_fu_453_p3;
    exp_tmp_V_fu_945_p4 <= ireg_V_fu_930_p1(62 downto 52);

    grp_fu_1232_ap_start_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1232_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1232_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1232_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_fu_1218_p3),44));
    grp_generic_atan_32_8_s_fu_286_ap_start <= grp_generic_atan_32_8_s_fu_286_ap_start_reg;
    icmp_ln143_fu_358_p2 <= "1" when (n_0_i_reg_247 = ap_const_lv5_13) else "0";
    icmp_ln1497_fu_447_p2 <= "1" when (signed(p_Val2_41_reg_213) > signed(p_Val2_47_reg_237)) else "0";
    icmp_ln1498_1_fu_304_p2 <= "1" when (in_V = ap_const_lv19_7F000) else "0";
    icmp_ln1498_2_fu_310_p2 <= "1" when (in_V = ap_const_lv19_0) else "0";
    icmp_ln1498_fu_298_p2 <= "1" when (in_V = ap_const_lv19_1000) else "0";
    icmp_ln195_fu_563_p2 <= "1" when (unsigned(n2_reg_1341) < unsigned(ap_const_lv6_15)) else "0";
    icmp_ln571_fu_989_p2 <= "1" when (trunc_ln556_fu_933_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_1001_p2 <= "1" when (signed(F2_fu_995_p2) > signed(ap_const_lv12_18)) else "0";
    icmp_ln582_fu_1027_p2 <= "1" when (F2_fu_995_p2 = ap_const_lv12_18) else "0";
    icmp_ln585_fu_1037_p2 <= "1" when (unsigned(sh_amt_fu_1019_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_1053_p2 <= "1" when (tmp_18_fu_1043_p4 = ap_const_lv7_0) else "0";
    icmp_ln885_fu_655_p2 <= "1" when (mul_ln703_fu_643_p2 = ap_const_lv32_1000000) else "0";
    icmp_ln897_2_fu_754_p2 <= "0" when (p_Result_s_fu_749_p2 = ap_const_lv32_0) else "1";
    icmp_ln897_fu_723_p2 <= "1" when (signed(tmp_14_fu_713_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_807_p2 <= "1" when (signed(lsb_index_fu_707_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_fu_930_p1 <= v_assign_reg_1467;
    isNeg_fu_380_p3 <= add_ln176_fu_374_p2(5 downto 5);
    
    l_fu_690_p3_proc : process(p_Result_17_fu_680_p4)
    begin
        l_fu_690_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_17_fu_680_p4(i) = '1' then
                l_fu_690_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_707_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_702_p2));
    lshr_ln897_fu_743_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln897_fu_739_p1(31-1 downto 0)))));
    lshr_ln908_fu_821_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_4_reg_1418),to_integer(unsigned('0' & add_ln908_fu_816_p2(31-1 downto 0)))));
    m_11_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_1452),64));
    m_7_fu_845_p3 <= 
        zext_ln908_fu_826_p1 when (icmp_ln908_reg_1447(0) = '1') else 
        shl_ln908_fu_839_p2;
    m_8_fu_855_p2 <= std_logic_vector(unsigned(m_7_fu_845_p3) + unsigned(zext_ln911_fu_852_p1));
    m_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1418),64));
    man_V_3_fu_975_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_20_fu_971_p1));
    man_V_4_fu_981_p3 <= 
        man_V_3_fu_975_p2 when (p_Result_19_fu_937_p3(0) = '1') else 
        p_Result_20_fu_971_p1;
    mul_ln703_fu_643_p0 <= zext_ln703_fu_640_p1(19 - 1 downto 0);
    mul_ln703_fu_643_p1 <= zext_ln703_fu_640_p1(19 - 1 downto 0);
    mul_ln703_fu_643_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln703_fu_643_p0) * unsigned(mul_ln703_fu_643_p1), 32));
    n2_fu_434_p3 <= (n_0_i_reg_247 & ap_const_lv1_0);
    n_fu_364_p2 <= std_logic_vector(unsigned(n_0_i_reg_247) + unsigned(ap_const_lv5_1));
    or_ln581_fu_1123_p2 <= (or_ln582_fu_1087_p2 or icmp_ln581_fu_1001_p2);
    or_ln582_fu_1087_p2 <= (icmp_ln582_fu_1027_p2 or icmp_ln571_fu_989_p2);
    or_ln603_1_fu_1155_p2 <= (and_ln585_fu_1111_p2 or and_ln582_fu_1081_p2);
    or_ln603_2_fu_1161_p2 <= (or_ln603_fu_1141_p2 or or_ln603_1_fu_1155_p2);
    or_ln603_fu_1141_p2 <= (and_ln603_fu_1135_p2 or and_ln585_1_fu_1117_p2);
    or_ln899_fu_793_p2 <= (and_ln899_fu_787_p2 or a_fu_760_p2);
    or_ln_fu_799_p3 <= (ap_const_lv31_0 & or_ln899_fu_793_p2);
    out_V_fu_1270_p3 <= 
        sub_ln703_fu_1264_p2 when (tmp_reg_1290(0) = '1') else 
        phi_ln703_reg_258;
    p_Result_15_fu_453_p3 <= p_Val2_39_reg_201(20 downto 20);
    
    p_Result_17_fu_680_p4_proc : process(tmp_V_4_fu_674_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_17_fu_680_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_674_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_17_fu_680_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_17_fu_680_p4_i) := tmp_V_4_fu_674_p3(32-1-p_Result_17_fu_680_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_17_fu_680_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_18_fu_907_p5 <= (tmp_4_fu_900_p3 & m_11_fu_879_p1(51 downto 0));
    p_Result_19_fu_937_p3 <= ireg_V_fu_930_p1(63 downto 63);
    p_Result_20_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_963_p3),54));
    p_Result_2_fu_780_p3 <= tmp_V_4_reg_1418(to_integer(unsigned(lsb_index_fu_707_p2)) downto to_integer(unsigned(lsb_index_fu_707_p2))) when (to_integer(unsigned(lsb_index_fu_707_p2))>= 0 and to_integer(unsigned(lsb_index_fu_707_p2))<=31) else "-";
    p_Result_s_fu_749_p2 <= (tmp_V_4_reg_1418 and lshr_ln897_fu_743_p2);
    p_Val2_37_fu_1201_p3 <= 
        select_ln603_2_fu_1195_p3 when (or_ln603_2_reg_1502(0) = '1') else 
        ap_const_lv32_0;
    p_Val2_43_fu_554_p2 <= std_logic_vector(unsigned(p_Val2_39_reg_201) - unsigned(r_V_12_fu_549_p2));
    p_Val2_45_fu_592_p2 <= std_logic_vector(unsigned(p_Val2_41_reg_213) - unsigned(r_V_13_fu_588_p2));
    p_Val2_s_fu_330_p3 <= 
        sub_ln203_fu_324_p2 when (tmp_fu_316_p3(0) = '1') else 
        in_V;
    r_V_11_fu_497_p3 <= 
        shl_ln1299_1_fu_486_p2 when (isNeg_reg_1319(0) = '1') else 
        ashr_ln1333_1_fu_492_p2;
    r_V_12_fu_549_p2 <= std_logic_vector(shift_right(signed(r_V_reg_1334),to_integer(unsigned('0' & zext_ln178_fu_546_p1(21-1 downto 0)))));
    r_V_13_fu_588_p2 <= std_logic_vector(shift_right(signed(r_V_11_reg_1358),to_integer(unsigned('0' & zext_ln178_reg_1370(21-1 downto 0)))));
    r_V_14_fu_568_p2 <= std_logic_vector(shift_right(signed(p_Val2_47_reg_237),to_integer(unsigned('0' & zext_ln194_fu_560_p1(21-1 downto 0)))));
    r_V_15_fu_514_p3 <= (tmp_7_fu_504_p4 & ap_const_lv1_0);
    r_V_fu_426_p3 <= 
        shl_ln1299_fu_414_p2 when (isNeg_fu_380_p3(0) = '1') else 
        ashr_ln1333_fu_420_p2;
    ret_V_fu_1212_p2 <= std_logic_vector(unsigned(ap_const_lv33_1000000) + unsigned(rhs_V_fu_1208_p1));
        rhs_V_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_37_fu_1201_p3),33));

    select_ln160_1_fu_623_p3 <= 
        sub_ln703_4_fu_602_p2 when (d_V_2_reg_1352(0) = '1') else 
        add_ln703_1_fu_611_p2;
    select_ln160_fu_616_p3 <= 
        add_ln703_fu_598_p2 when (d_V_2_reg_1352(0) = '1') else 
        sub_ln703_5_fu_607_p2;
    select_ln195_fu_580_p3 <= 
        add_ln703_2_fu_574_p2 when (icmp_ln195_fu_563_p2(0) = '1') else 
        p_Val2_47_reg_237;
    select_ln588_fu_1067_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_19_fu_1059_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln603_1_fu_1147_p3 <= 
        select_ln588_fu_1067_p3 when (and_ln585_fu_1111_p2(0) = '1') else 
        trunc_ln583_fu_1033_p1;
    select_ln603_2_fu_1195_p3 <= 
        select_ln603_fu_1188_p3 when (or_ln603_reg_1492(0) = '1') else 
        select_ln603_1_reg_1497;
    select_ln603_fu_1188_p3 <= 
        shl_ln604_fu_1183_p2 when (and_ln603_reg_1487(0) = '1') else 
        trunc_ln586_fu_1179_p1;
    select_ln885_fu_923_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_reg_1407(0) = '1') else 
        bitcast_ln729_fu_919_p1;
    select_ln915_fu_882_p3 <= 
        ap_const_lv11_3FF when (tmp_16_reg_1457(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1367_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_394_p3),32));

    sext_ln1367_1cast27_fu_483_p1 <= sext_ln1367_1_reg_1329(21 - 1 downto 0);
    sext_ln1367_1cast_fu_410_p1 <= sext_ln1367_1_fu_406_p1(21 - 1 downto 0);
        sext_ln1367_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_394_p3),21));

        sext_ln581_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1477),32));

        sext_ln703_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_8_fu_1250_p4),15));

    sh_amt_fu_1019_p3 <= 
        add_ln581_fu_1007_p2 when (icmp_ln581_fu_1001_p2(0) = '1') else 
        sub_ln581_fu_1013_p2;
    shl_ln1299_1_fu_486_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_41_reg_213),to_integer(unsigned('0' & sext_ln1367_1cast27_fu_483_p1(21-1 downto 0)))));
    shl_ln1299_fu_414_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_39_reg_201),to_integer(unsigned('0' & sext_ln1367_1cast_fu_410_p1(21-1 downto 0)))));
    shl_ln604_fu_1183_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1482),to_integer(unsigned('0' & sext_ln581_fu_1167_p1(31-1 downto 0)))));
    shl_ln908_fu_839_p2 <= std_logic_vector(shift_left(unsigned(m_fu_813_p1),to_integer(unsigned('0' & zext_ln908_2_fu_835_p1(31-1 downto 0)))));
    sub_ln1367_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) - unsigned(zext_ln143_fu_370_p1));
    sub_ln203_5_fu_526_p2 <= std_logic_vector(unsigned(p_Val2_38_reg_225) - unsigned(zext_ln709_fu_522_p1));
    sub_ln203_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(in_V));
    sub_ln581_fu_1013_p2 <= std_logic_vector(unsigned(ap_const_lv12_18) - unsigned(F2_fu_995_p2));
    sub_ln703_4_fu_602_p2 <= std_logic_vector(unsigned(p_Val2_45_fu_592_p2) - unsigned(r_V_reg_1334));
    sub_ln703_5_fu_607_p2 <= std_logic_vector(unsigned(p_Val2_43_reg_1375) - unsigned(r_V_11_reg_1358));
    sub_ln703_fu_1264_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(phi_ln703_reg_258));
    sub_ln894_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_reg_1426));
    sub_ln897_fu_733_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln897_fu_729_p1));
    sub_ln908_fu_830_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1436));
    sub_ln915_fu_889_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) - unsigned(trunc_ln893_reg_1431));
    t_V_1_fu_1218_p3 <= (p_Val2_s_reg_1295 & ap_const_lv24_0);
    t_V_fu_350_p3 <= (trunc_ln728_fu_346_p1 & ap_const_lv6_0);
    tmp_12_fu_338_p3 <= p_Val2_s_fu_330_p3(11 downto 11);
    tmp_14_fu_713_p4 <= lsb_index_fu_707_p2(31 downto 1);
    tmp_15_fu_766_p3 <= lsb_index_fu_707_p2(31 downto 31);
    tmp_18_fu_1043_p4 <= sh_amt_fu_1019_p3(11 downto 5);
    tmp_19_fu_1059_p3 <= ireg_V_fu_930_p1(63 downto 63);
    tmp_21_fu_461_p3 <= p_Val2_39_reg_201(20 downto 20);
    tmp_4_fu_900_p3 <= (p_Result_16_reg_1412 & add_ln915_fu_894_p2);
    tmp_5_fu_963_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_959_p1);
    tmp_7_fu_504_p4 <= cordic_apfixed_circ_q0(125 downto 108);
    tmp_V_3_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv32_1000000) - unsigned(mul_ln703_fu_643_p2));
    tmp_V_4_fu_674_p3 <= 
        tmp_V_fu_669_p2 when (p_Result_16_reg_1412(0) = '1') else 
        tmp_V_3_reg_1401;
    tmp_V_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_V_3_reg_1401));
    tmp_fu_316_p3 <= in_V(18 downto 18);
    trunc_ln556_fu_933_p1 <= ireg_V_fu_930_p1(63 - 1 downto 0);
    trunc_ln565_fu_959_p1 <= ireg_V_fu_930_p1(52 - 1 downto 0);
    trunc_ln583_fu_1033_p1 <= man_V_4_fu_981_p3(32 - 1 downto 0);
    trunc_ln586_fu_1179_p1 <= ashr_ln586_fu_1174_p2(32 - 1 downto 0);
    trunc_ln708_8_fu_1250_p4 <= grp_generic_atan_32_8_s_fu_286_ap_return(30 downto 17);
    trunc_ln728_fu_346_p1 <= p_Val2_s_fu_330_p3(15 - 1 downto 0);
    trunc_ln731_fu_1238_p1 <= sdiv_ln1148_reg_1522(20 - 1 downto 0);
    trunc_ln893_fu_698_p1 <= l_fu_690_p3(11 - 1 downto 0);
    trunc_ln897_fu_729_p1 <= sub_ln894_fu_702_p2(6 - 1 downto 0);
    tz_V_fu_538_p3 <= 
        sub_ln203_5_fu_526_p2 when (d_V_2_fu_475_p3(0) = '1') else 
        add_ln203_fu_532_p2;
    ush_fu_394_p3 <= 
        sub_ln1367_fu_388_p2 when (isNeg_fu_380_p3(0) = '1') else 
        add_ln176_fu_374_p2;
    xor_ln571_fu_1075_p2 <= (icmp_ln571_fu_989_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1129_p2 <= (or_ln581_fu_1123_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1093_p2 <= (or_ln582_fu_1087_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1105_p2 <= (icmp_ln585_fu_1037_p2 xor ap_const_lv1_1);
    xor_ln899_fu_774_p2 <= (tmp_15_fu_766_p3 xor ap_const_lv1_1);
    xsqrtonex_V_fu_1241_p3 <= (trunc_ln731_fu_1238_p1 & ap_const_lv12_0);
    zext_ln143_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_247),6));
    zext_ln178_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_1313),21));
    zext_ln194_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_reg_1341),21));
    zext_ln201_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_247),64));
    zext_ln461_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_945_p4),12));
    zext_ln586_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_1167_p1),54));
    zext_ln703_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_1295),32));
    zext_ln709_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_15_fu_514_p3),21));
    zext_ln897_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_733_p2),32));
    zext_ln908_2_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_830_p2),64));
    zext_ln908_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_821_p2),64));
    zext_ln911_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1442),64));
end behav;
