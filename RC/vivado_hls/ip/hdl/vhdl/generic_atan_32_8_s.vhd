-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_atan_32_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of generic_atan_32_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv34_80000000 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1000000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_FE1 : STD_LOGIC_VECTOR (11 downto 0) := "111111100001";
    constant ap_const_lv12_1F : STD_LOGIC_VECTOR (11 downto 0) := "000000011111";
    constant ap_const_lv12_22 : STD_LOGIC_VECTOR (11 downto 0) := "000000100010";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv34_3FFFFFFFF : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111111111111111111";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv35_C90FDAA2 : STD_LOGIC_VECTOR (34 downto 0) := "00011001001000011111101101010100010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_apfixed_circ_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_apfixed_circ_ce0 : STD_LOGIC;
    signal cordic_apfixed_circ_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Val2_29_reg_188 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_27_reg_199 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_23_reg_209 : STD_LOGIC_VECTOR (33 downto 0);
    signal ush_reg_221 : STD_LOGIC_VECTOR (5 downto 0);
    signal sign0_V_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign0_V_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal inabs_V_fu_249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inabs_V_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1494_fu_257_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1494_reg_883 : STD_LOGIC_VECTOR (32 downto 0);
    signal sign1_V_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign1_V_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln728_fu_273_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal l_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln893_fu_307_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_904 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln894_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_5_reg_925 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_517_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_8_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_945 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal man_V_2_fu_584_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_950 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln571_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln582_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln602_fu_650_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln602_reg_973 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln603_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_674_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln583_fu_682_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln87_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state38_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_fu_714_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_11_fu_741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1010 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_V_fu_773_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tx_V_fu_781_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tz_V_fu_815_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state38 : STD_LOGIC;
    signal ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_27_ph_reg_165 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln586_fu_703_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln604_fu_689_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln99_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1253_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_277_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_7_fu_287_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_295_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lsb_index_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_322_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_338_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_fu_342_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_fu_348_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln897_fu_352_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_2_fu_358_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln897_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_375_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_454_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln915_fu_498_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_491_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_509_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ireg_V_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_548_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_562_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_3_fu_566_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_10_fu_574_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_9_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_578_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_536_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_558_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_598_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_604_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln581_fu_620_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_626_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_632_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln604_fu_686_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln586_fu_695_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_698_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln1299_fu_720_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_10_fu_730_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_fu_724_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln203_4_fu_767_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln203_fu_755_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln203_3_fu_761_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln203_fu_749_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_5_fu_789_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal z_s_V_fu_799_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln203_4_fu_809_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln203_3_fu_803_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln703_fu_822_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal ret_V_fu_826_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal out_V_fu_832_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_5_fu_842_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_7_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_895 : BOOLEAN;

    component geo_dist_ddiv_64nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component generic_sincos_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;



begin
    cordic_apfixed_circ_U : component generic_sincos_cobkb
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_apfixed_circ_address0,
        ce0 => cordic_apfixed_circ_ce0,
        q0 => cordic_apfixed_circ_q0);

    geo_dist_ddiv_64nfYi_U7 : component geo_dist_ddiv_64nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => grp_fu_232_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state38) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state38))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state38);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_23_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                p_Val2_23_reg_209 <= ap_const_lv34_0;
            elsif (((icmp_ln87_reg_996 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_23_reg_209 <= tz_V_fu_815_p3;
            end if; 
        end if;
    end process;

    p_Val2_27_ph_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sign1_V_fu_261_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_27_ph_reg_165 <= zext_ln728_fu_273_p1;
            elsif (((icmp_ln603_reg_978 = ap_const_lv1_1) and (icmp_ln582_reg_969 = ap_const_lv1_0) and (icmp_ln581_reg_959 = ap_const_lv1_0) and (icmp_ln571_reg_955 = ap_const_lv1_0) and (sign1_V_reg_889 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                p_Val2_27_ph_reg_165 <= shl_ln604_fu_689_p2;
            elsif (((icmp_ln581_fu_614_p2 = ap_const_lv1_1) and (icmp_ln585_fu_660_p2 = ap_const_lv1_0) and (icmp_ln582_fu_644_p2 = ap_const_lv1_0) and (icmp_ln571_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                p_Val2_27_ph_reg_165 <= select_ln588_fu_674_p3;
            elsif (((icmp_ln585_reg_982 = ap_const_lv1_1) and (icmp_ln581_reg_959 = ap_const_lv1_1) and (icmp_ln582_reg_969 = ap_const_lv1_0) and (icmp_ln571_reg_955 = ap_const_lv1_0) and (sign1_V_reg_889 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                p_Val2_27_ph_reg_165 <= trunc_ln586_fu_703_p1;
            elsif (((icmp_ln582_fu_644_p2 = ap_const_lv1_1) and (icmp_ln571_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                p_Val2_27_ph_reg_165 <= trunc_ln583_fu_682_p1;
            elsif ((((icmp_ln571_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln603_fu_654_p2 = ap_const_lv1_0) and (icmp_ln582_fu_644_p2 = ap_const_lv1_0) and (icmp_ln581_fu_614_p2 = ap_const_lv1_0) and (icmp_ln571_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
                p_Val2_27_ph_reg_165 <= ap_const_lv34_0;
            end if; 
        end if;
    end process;

    p_Val2_27_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                p_Val2_27_reg_199 <= ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14;
            elsif (((icmp_ln87_fu_708_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_27_reg_199 <= ty_V_fu_773_p3;
            end if; 
        end if;
    end process;

    p_Val2_29_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                p_Val2_29_reg_188 <= ap_const_lv34_80000000;
            elsif (((icmp_ln87_fu_708_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_29_reg_188 <= tx_V_fu_781_p3;
            end if; 
        end if;
    end process;

    ush_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                ush_reg_221 <= ap_const_lv6_0;
            elsif (((icmp_ln87_fu_708_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ush_reg_221 <= n_fu_714_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                icmp_ln571_reg_955 <= icmp_ln571_fu_592_p2;
                man_V_2_reg_950 <= man_V_2_fu_584_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                icmp_ln581_reg_959 <= icmp_ln581_fu_614_p2;
                icmp_ln582_reg_969 <= icmp_ln582_fu_644_p2;
                sext_ln581_reg_963 <= sext_ln581_fu_640_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln581_fu_614_p2 = ap_const_lv1_1) and (icmp_ln582_fu_644_p2 = ap_const_lv1_0) and (icmp_ln571_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                icmp_ln585_reg_982 <= icmp_ln585_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln582_fu_644_p2 = ap_const_lv1_0) and (icmp_ln581_fu_614_p2 = ap_const_lv1_0) and (icmp_ln571_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                icmp_ln603_reg_978 <= icmp_ln603_fu_654_p2;
                trunc_ln602_reg_973 <= trunc_ln602_fu_650_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln87_reg_996 <= icmp_ln87_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln908_reg_920 <= icmp_ln908_fu_416_p2;
                    or_ln_reg_915(0) <= or_ln_fu_408_p3(0);
                sub_ln894_reg_909 <= sub_ln894_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                inabs_V_reg_877 <= inabs_V_fu_249_p3;
                sign0_V_reg_872 <= sign0_V_fu_237_p2;
                sign1_V_reg_889 <= sign1_V_fu_261_p2;
                    zext_ln1494_reg_883(31 downto 0) <= zext_ln1494_fu_257_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sign1_V_fu_261_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                l_reg_899 <= l_fu_303_p1;
                trunc_ln893_reg_904 <= trunc_ln893_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m_5_reg_925 <= m_2_fu_464_p2(63 downto 1);
                tmp_7_reg_930 <= m_2_fu_464_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Result_8_reg_935 <= p_Result_8_fu_517_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_11_reg_1010 <= p_Val2_27_reg_199(33 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                v_assign_reg_945 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    zext_ln1494_reg_883(32) <= '0';
    or_ln_reg_915(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, sign1_V_fu_261_p2, icmp_ln87_fu_708_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((sign1_V_fu_261_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                elsif (((sign1_V_fu_261_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln87_fu_708_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln87_fu_708_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_558_p1));
    a_fu_369_p2 <= (icmp_ln897_fu_332_p2 and icmp_ln897_1_fu_363_p2);
    add_ln203_3_fu_803_p2 <= std_logic_vector(unsigned(z_s_V_fu_799_p1) + unsigned(p_Val2_23_reg_209));
    add_ln203_4_fu_767_p2 <= std_logic_vector(unsigned(p_Val2_27_reg_199) + unsigned(r_V_fu_724_p2));
    add_ln203_fu_749_p2 <= std_logic_vector(unsigned(r_V_10_fu_730_p2) + unsigned(p_Val2_29_reg_188));
    add_ln581_fu_620_p2 <= std_logic_vector(unsigned(F2_fu_598_p2) + unsigned(ap_const_lv12_FE1));
    add_ln908_fu_425_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_909));
    add_ln915_fu_503_p2 <= std_logic_vector(unsigned(sub_ln915_fu_498_p2) + unsigned(select_ln915_fu_491_p3));
    and_ln899_fu_396_p2 <= (xor_ln899_fu_383_p2 and p_Result_3_fu_389_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_895_assign_proc : process(sign1_V_reg_889, icmp_ln571_reg_955, icmp_ln582_reg_969, ap_CS_fsm_state37)
    begin
                ap_condition_895 <= ((icmp_ln582_reg_969 = ap_const_lv1_0) and (icmp_ln571_reg_955 = ap_const_lv1_0) and (sign1_V_reg_889 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37));
    end process;


    ap_condition_pp0_exit_iter0_state38_assign_proc : process(icmp_ln87_fu_708_p2)
    begin
        if ((icmp_ln87_fu_708_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14_assign_proc : process(icmp_ln581_reg_959, icmp_ln603_reg_978, icmp_ln585_reg_982, p_Val2_27_ph_reg_165, trunc_ln586_fu_703_p1, shl_ln604_fu_689_p2, ap_condition_895)
    begin
        if ((ap_const_boolean_1 = ap_condition_895)) then
            if (((icmp_ln603_reg_978 = ap_const_lv1_1) and (icmp_ln581_reg_959 = ap_const_lv1_0))) then 
                ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14 <= shl_ln604_fu_689_p2;
            elsif (((icmp_ln585_reg_982 = ap_const_lv1_1) and (icmp_ln581_reg_959 = ap_const_lv1_1))) then 
                ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14 <= trunc_ln586_fu_703_p1;
            else 
                ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14 <= p_Val2_27_ph_reg_165;
            end if;
        else 
            ap_phi_mux_p_Val2_27_ph_phi_fu_169_p14 <= p_Val2_27_ph_reg_165;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        out_V_7_fu_852_p3 when (sign0_V_reg_872(0) = '1') else 
        sub_ln703_fu_859_p2;
    ashr_ln586_fu_698_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_950),to_integer(unsigned('0' & zext_ln586_fu_695_p1(31-1 downto 0)))));
    cordic_apfixed_circ_address0 <= zext_ln99_fu_736_p1(7 - 1 downto 0);

    cordic_apfixed_circ_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cordic_apfixed_circ_ce0 <= ap_const_logic_1;
        else 
            cordic_apfixed_circ_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_548_p4 <= ireg_V_fu_533_p1(62 downto 52);
    grp_fu_232_p1 <= p_Result_8_reg_935;
    icmp_ln571_fu_592_p2 <= "1" when (trunc_ln556_fu_536_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_614_p2 <= "1" when (signed(tmp_9_fu_604_p4) > signed(ap_const_lv7_0)) else "0";
    icmp_ln582_fu_644_p2 <= "1" when (F2_fu_598_p2 = ap_const_lv12_1F) else "0";
    icmp_ln585_fu_660_p2 <= "1" when (unsigned(sh_amt_fu_632_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_654_p2 <= "1" when (unsigned(sh_amt_fu_632_p3) < unsigned(ap_const_lv12_22)) else "0";
    icmp_ln87_fu_708_p2 <= "1" when (ush_reg_221 = ap_const_lv6_22) else "0";
    icmp_ln897_1_fu_363_p2 <= "0" when (p_Result_2_fu_358_p2 = ap_const_lv33_0) else "1";
    icmp_ln897_fu_332_p2 <= "1" when (signed(tmp_4_fu_322_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_416_p2 <= "1" when (signed(lsb_index_fu_316_p2) > signed(ap_const_lv32_0)) else "0";
    inabs_V_fu_249_p3 <= 
        in_V when (sign0_V_fu_237_p2(0) = '1') else 
        sub_ln1253_fu_243_p2;
    ireg_V_fu_533_p1 <= v_assign_reg_945;
    l_fu_303_p1 <= tmp_fu_295_p3(32 - 1 downto 0);
    lsb_index_fu_316_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_311_p2));
    lshr_ln897_fu_352_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln897_fu_348_p1(31-1 downto 0)))));
    lshr_ln908_fu_430_p2 <= std_logic_vector(shift_right(unsigned(inabs_V_reg_877),to_integer(unsigned('0' & add_ln908_fu_425_p2(31-1 downto 0)))));
    m_1_fu_454_p3 <= 
        zext_ln908_fu_435_p1 when (icmp_ln908_reg_920(0) = '1') else 
        shl_ln908_fu_448_p2;
    m_2_fu_464_p2 <= std_logic_vector(unsigned(m_1_fu_454_p3) + unsigned(zext_ln911_fu_461_p1));
    m_6_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_925),64));
    m_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inabs_V_reg_877),64));
    man_V_1_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_10_fu_574_p1));
    man_V_2_fu_584_p3 <= 
        man_V_1_fu_578_p2 when (p_Result_9_fu_540_p3(0) = '1') else 
        p_Result_10_fu_574_p1;
    n_fu_714_p2 <= std_logic_vector(unsigned(ush_reg_221) + unsigned(ap_const_lv6_1));
    or_ln899_fu_402_p2 <= (and_ln899_fu_396_p2 or a_fu_369_p2);
    or_ln_fu_408_p3 <= (ap_const_lv31_0 & or_ln899_fu_402_p2);
    out_V_5_fu_842_p4 <= p_Val2_23_reg_209(32 downto 1);
    out_V_7_fu_852_p3 <= 
        out_V_fu_832_p4 when (sign1_V_reg_889(0) = '1') else 
        out_V_5_fu_842_p4;
    out_V_fu_832_p4 <= ret_V_fu_826_p2(32 downto 1);
    p_Result_10_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_566_p3),54));
    p_Result_2_fu_358_p2 <= (zext_ln1494_reg_883 and lshr_ln897_fu_352_p2);
    p_Result_3_fu_389_p3 <= zext_ln1494_reg_883(to_integer(unsigned(lsb_index_fu_316_p2)) downto to_integer(unsigned(lsb_index_fu_316_p2))) when (to_integer(unsigned(lsb_index_fu_316_p2))>= 0 and to_integer(unsigned(lsb_index_fu_316_p2))<=32) else "-";
    p_Result_7_fu_287_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_s_fu_277_p4);
    p_Result_8_fu_517_p5 <= (tmp_2_fu_509_p3 & m_6_fu_488_p1(51 downto 0));
    p_Result_9_fu_540_p3 <= ireg_V_fu_533_p1(63 downto 63);
    
    p_Result_s_fu_277_p4_proc : process(zext_ln1494_fu_257_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_s_fu_277_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln1494_fu_257_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_s_fu_277_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_s_fu_277_p4_i) := zext_ln1494_fu_257_p1(33-1-p_Result_s_fu_277_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_277_p4 <= resvalue(33-1 downto 0);
    end process;

    r_V_10_fu_730_p2 <= std_logic_vector(shift_right(signed(p_Val2_27_reg_199),to_integer(unsigned('0' & zext_ln1299_fu_720_p1(31-1 downto 0)))));
    r_V_fu_724_p2 <= std_logic_vector(shift_right(signed(p_Val2_29_reg_188),to_integer(unsigned('0' & zext_ln1299_fu_720_p1(31-1 downto 0)))));
    ret_V_fu_826_p2 <= std_logic_vector(unsigned(ap_const_lv35_C90FDAA2) - unsigned(zext_ln703_fu_822_p1));
    select_ln588_fu_674_p3 <= 
        ap_const_lv34_3FFFFFFFF when (tmp_10_fu_666_p3(0) = '1') else 
        ap_const_lv34_0;
    select_ln915_fu_491_p3 <= 
        ap_const_lv11_3FF when (tmp_7_reg_930(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln581_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_632_p3),32));

    sh_amt_fu_632_p3 <= 
        add_ln581_fu_620_p2 when (icmp_ln581_fu_614_p2(0) = '1') else 
        sub_ln581_fu_626_p2;
    shl_ln604_fu_689_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln602_reg_973),to_integer(unsigned('0' & zext_ln604_fu_686_p1(31-1 downto 0)))));
    shl_ln908_fu_448_p2 <= std_logic_vector(shift_left(unsigned(m_fu_422_p1),to_integer(unsigned('0' & zext_ln908_1_fu_444_p1(31-1 downto 0)))));
    sign0_V_fu_237_p2 <= "1" when (signed(in_V) > signed(ap_const_lv32_0)) else "0";
    sign1_V_fu_261_p2 <= "1" when (unsigned(inabs_V_fu_249_p3) > unsigned(ap_const_lv32_1000000)) else "0";
    sub_ln1253_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(in_V));
    sub_ln203_3_fu_761_p2 <= std_logic_vector(unsigned(p_Val2_29_reg_188) - unsigned(r_V_10_fu_730_p2));
    sub_ln203_4_fu_809_p2 <= std_logic_vector(unsigned(p_Val2_23_reg_209) - unsigned(z_s_V_fu_799_p1));
    sub_ln203_fu_755_p2 <= std_logic_vector(unsigned(p_Val2_27_reg_199) - unsigned(r_V_fu_724_p2));
    sub_ln581_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv12_1F) - unsigned(F2_fu_598_p2));
    sub_ln703_fu_859_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(out_V_7_fu_852_p3));
    sub_ln894_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_reg_899));
    sub_ln897_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv6_17) - unsigned(trunc_ln897_fu_338_p1));
    sub_ln908_fu_439_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_909));
    sub_ln915_fu_498_p2 <= std_logic_vector(unsigned(ap_const_lv11_9) - unsigned(trunc_ln893_reg_904));
    tmp_10_fu_666_p3 <= ireg_V_fu_533_p1(63 downto 63);
    tmp_11_fu_741_p3 <= p_Val2_27_reg_199(33 downto 33);
    tmp_2_fu_509_p3 <= (ap_const_lv1_0 & add_ln915_fu_503_p2);
    tmp_3_fu_566_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_562_p1);
    tmp_4_fu_322_p4 <= lsb_index_fu_316_p2(31 downto 1);
    tmp_5_fu_789_p4 <= cordic_apfixed_circ_q0(125 downto 95);
    tmp_6_fu_375_p3 <= lsb_index_fu_316_p2(31 downto 31);
    tmp_9_fu_604_p4 <= F2_fu_598_p2(11 downto 5);
    
    tmp_fu_295_p3_proc : process(p_Result_7_fu_287_p3)
    begin
        tmp_fu_295_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_7_fu_287_p3(i) = '1' then
                tmp_fu_295_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln556_fu_536_p1 <= ireg_V_fu_533_p1(63 - 1 downto 0);
    trunc_ln565_fu_562_p1 <= ireg_V_fu_533_p1(52 - 1 downto 0);
    trunc_ln583_fu_682_p1 <= man_V_2_fu_584_p3(34 - 1 downto 0);
    trunc_ln586_fu_703_p1 <= ashr_ln586_fu_698_p2(34 - 1 downto 0);
    trunc_ln602_fu_650_p1 <= man_V_2_fu_584_p3(34 - 1 downto 0);
    trunc_ln893_fu_307_p1 <= tmp_fu_295_p3(11 - 1 downto 0);
    trunc_ln897_fu_338_p1 <= sub_ln894_fu_311_p2(6 - 1 downto 0);
    tx_V_fu_781_p3 <= 
        sub_ln203_3_fu_761_p2 when (tmp_11_fu_741_p3(0) = '1') else 
        add_ln203_fu_749_p2;
    ty_V_fu_773_p3 <= 
        add_ln203_4_fu_767_p2 when (tmp_11_fu_741_p3(0) = '1') else 
        sub_ln203_fu_755_p2;
    tz_V_fu_815_p3 <= 
        sub_ln203_4_fu_809_p2 when (tmp_11_reg_1010(0) = '1') else 
        add_ln203_3_fu_803_p2;
    xor_ln899_fu_383_p2 <= (tmp_6_fu_375_p3 xor ap_const_lv1_1);
    y_V_fu_267_p2 <= std_logic_vector(shift_left(unsigned(inabs_V_fu_249_p3),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    z_s_V_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_789_p4),34));
    zext_ln1299_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_reg_221),34));
    zext_ln1494_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inabs_V_fu_249_p3),33));
    zext_ln461_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_548_p4),12));
    zext_ln586_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_reg_963),54));
    zext_ln604_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_reg_963),34));
    zext_ln703_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_23_reg_209),35));
    zext_ln728_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_267_p2),34));
    zext_ln897_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_342_p2),33));
    zext_ln908_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_439_p2),64));
    zext_ln908_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_430_p2),64));
    zext_ln911_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_915),64));
    zext_ln99_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_reg_221),64));
end behav;
